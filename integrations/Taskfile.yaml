# Copyright AGNTCY Contributors (https://github.com/agntcy)
# SPDX-License-Identifier: Apache-2.0

---
version: '3'

silent: true

vars:
  KIND_CLUSTER_NAME: '{{ .KIND_CLUSTER_NAME | default "agntcy-test" }}'

  ## Image config
  IMAGE_REPO: '{{ .IMAGE_REPO | default "ghcr.io/agntcy" }}'
  GATEWAY_IMAGE_TAG: '{{ .GATEWAY_IMAGE_TAG | default "0.3.11" }}'
  DIRECTORY_IMAGE_TAG: '{{ .DIRECTORY_IMAGE_TAG | default "v0.2.1" }}'

  IMAGE_BAKE_OPTS: '{{ .IMAGE_BAKE_OPTS | default "--set *.platform=linux/arm64" }}'
  TEST_APP_TAG: '{{ .TEST_APP_TAG | default "v0.0.4" }}'

  AZURE_OPENAI_API_KEY: '{{ .AZURE_OPENAI_API_KEY | default "" }}'
  AZURE_OPENAI_ENDPOINT: '{{ .AZURE_OPENAI_ENDPOINT | default "" }}'

  HELM_NAMESPACE: '{{ .HELM_NAMESPACE | default "default" }}'
  REMOVE_CONTAINERS: '{{ .REMOVE_CONTAINERS | default "true" }}'
  REGCRED_CREATE: '{{ .REGCRED_CREATE | default "false" }}'


  RUNNER_TYPE: '{{ .RUNNER_TYPE | default "docker" }}'

  ARCH:
    sh: |
      if [ "$ARCH" == "" ]; then
        uname -m
      else
        printf $ARCH
      fi
  OS:
    sh: |
      if [ "$OS" == "" ]; then
        uname -s
      else
        printf $OS
      fi
  DIRCTL_BIN_PATH:
    sh: |
      if [ "$DIRCTL_BIN_PATH" == "" ]; then
        mkdir -p $PWD/agntcy-dir/tests/.bin
        printf $PWD/agntcy-dir/tests/.bin
      else
        printf $DIRCTL_BIN_PATH
      fi
  DIRCTL_BIN_VERSION: '{{ .DIRCTL_BIN_VERSION | default "v0.2.1" }}'

tasks:
  kind:create:
    desc: Create kind cluster
    cmds:
      - kind create cluster --name {{.KIND_CLUSTER_NAME}} --wait 60s || true
      - kubectl cluster-info --context kind-{{.KIND_CLUSTER_NAME}}

  kind:destroy:
    desc: Destroy kind cluster
    cmds:
      - kind delete cluster --name {{.KIND_CLUSTER_NAME}}

  k8s:port-forward:setup:directory:
    internal: true
    cmds:
      - kubectl port-forward svc/agntcy-dir-apiserver -n {{ .HELM_NAMESPACE }} 8888 &
      - sleep 1

  k8s:port-forward:teardown:directory:
    internal: true
    cmds:
      - kill -9 $(ps aux | grep port-forward | grep agntcy-dir-apiserver | awk '{print $2}') || true

  k8s:port-forward:setup:gateway:
    internal: true
    cmds:
      - kubectl port-forward svc/agntcy-agp -n {{ .HELM_NAMESPACE }} 46357 &
      - sleep 1

  k8s:port-forward:teardown:gateway:
    internal: true
    cmds:
      - kill -9 $(ps aux | grep port-forward | grep agntcy-agp | awk '{print $2}') || true

  test:env:directory:deploy:
    desc: Deploy Agntcy directory test env
    cmds:
      - |
        helm dependency build ./agntcy-dir/components/helm
        helm upgrade agntcy-dir \
          ./agntcy-dir/components/helm \
          --set dir.apiserver.image.tag="{{ .DIRECTORY_IMAGE_TAG }}" \
          --set regcred.create="{{ .REGCRED_CREATE }}" \
          --namespace {{ .HELM_NAMESPACE }} \
          --create-namespace \
          --install \
          --wait \
          --wait-for-jobs \
          --timeout "15m"

  test:env:directory:bootstrap:deploy:
    desc: Deploy Directory network peers
    deps:
      - download:dirctl-bin
    env:
       DIRECTORY_LOGGER_LOG_LEVEL: ERROR
    cmds:
      - |
        test -f /tmp/node.privkey || openssl genpkey -algorithm ED25519 -out /tmp/node.privkey
        bootstrap_peerid=$(./agntcy-dir/tests/.bin/dirctl network info /tmp/node.privkey)
        echo "PEER ID: ${bootstrap_peerid}"
        echo BOOTSTRAP_PEER_ID="${bootstrap_peerid}" > .env
        helm dependency build ./agntcy-dir/components/helm
        helm upgrade agntcy-dir \
          ./agntcy-dir/components/helm \
          --set dir.apiserver.image.tag="{{ .DIRECTORY_IMAGE_TAG }}" \
          --set regcred.create="{{ .REGCRED_CREATE }}" \
          --set dir.apiserver.privKey="$(cat /tmp/node.privkey)" \
          -f ./agntcy-dir/components/config/bootstrap.yaml \
          --namespace bootstrap \
          --create-namespace \
          --install \
          --wait \
          --wait-for-jobs \
          --timeout "15m"

  test:env:directory:network:deploy:
    desc: Deploy Directory network peers
    deps:
      - test:env:directory:bootstrap:deploy
    cmds:
      - for:
          matrix:
            PEER: [ "peer1", "peer2", "peer3" ]
        cmd: |
          export $(cat .env)
          helm upgrade agntcy-dir \
            ./agntcy-dir/components/helm \
            --set dir.apiserver.image.tag="{{ .DIRECTORY_IMAGE_TAG }}" \
            --set regcred.create="{{ .REGCRED_CREATE }}" \
            --set dir.apiserver.config.routing.bootstrap_peers[0]="/dns4/agntcy-dir-apiserver-routing.bootstrap.svc.cluster.local/tcp/8999/p2p/${BOOTSTRAP_PEER_ID}" \
            --namespace "{{ .ITEM.PEER }}" \
            --create-namespace \
            --install \
            --wait \
            --wait-for-jobs \
            --timeout "15m"

  test:env:directory:network:cleanup:
    desc: Remove Directory network peers
    cmds:
      - for:
          matrix:
            PEER: [ "bootstrap", "peer1", "peer2", "peer3" ]
        cmd: |
          helm delete --namespace {{ .ITEM.PEER }} agntcy-dir


  test:env:directory:cleanup:
    desc: Remove agntcy directory test env
    cmds:
      - helm delete --namespace {{ .HELM_NAMESPACE }} agntcy-dir

  test:env:gateway:deploy:
    desc: Deploy agntcy gateway test env
    cmds:
      - |
        helm dependency build ./agntcy-agp/components/helm
        helm upgrade agntcy-agp \
          ./agntcy-agp/components/helm \
          --set agp.image.tag="{{ .GATEWAY_IMAGE_TAG }}" \
          --namespace {{ .HELM_NAMESPACE }} \
          --create-namespace \
          --install \
          --wait \
          --wait-for-jobs \
          --timeout "15m"

  test:env:gateway:cleanup:
    desc: Remove agent gateway test env
    cmds:
      - helm delete --namespace {{ .HELM_NAMESPACE }} agntcy-agp

  build:gateway:agentic-apps:
    desc: Build agentic containers
    dir: ./agntcy-agp/agentic-apps
    cmds:
      - IMAGE_TAG={{ .TEST_APP_TAG }} docker buildx bake {{ .IMAGE_BAKE_OPTS }} --load

  test:directory:
    desc: Directory test
    cmds:
      - task: k8s:port-forward:setup:directory
      - defer: { task: k8s:port-forward:teardown:directory }
      - defer: { task: manifests:cleanup }
      - REMOVE_CONTAINERS={{.REMOVE_CONTAINERS}} RUNNER_TYPE={{.RUNNER_TYPE}} PATH=$PATH:{{.DIRCTL_BIN_PATH}} IMAGE_REPO={{.IMAGE_REPO}} DIRECTORY_IMAGE_TAG={{.DIRECTORY_IMAGE_TAG}} go test ./agntcy-dir/tests -v -failfast -test.v -test.paniconexit0 -ginkgo.timeout 30m -timeout 30m -ginkgo.v

  test:directory:compiler:
    desc: Agntcy compiler test
    cmds:
      - docker pull {{.IMAGE_REPO}}/dir-ctl:{{.DIRECTORY_IMAGE_TAG}}
      - REMOVE_CONTAINERS={{.REMOVE_CONTAINERS}} RUNNER_TYPE={{.RUNNER_TYPE}} PATH=$PATH:{{.DIRCTL_BIN_PATH}} IMAGE_REPO={{.IMAGE_REPO}} DIRECTORY_IMAGE_TAG={{.DIRECTORY_IMAGE_TAG}} go test ./agntcy-dir/tests -v -failfast -test.v -test.paniconexit0 -ginkgo.timeout 10m -timeout 10m -ginkgo.v -ginkgo.focus "agent compilation"

  test:directory:compile:samples:
    desc: Agntcy compiler test in samples
    cmds:
      - docker pull {{.IMAGE_REPO}}/dir-ctl:{{.DIRECTORY_IMAGE_TAG}}
      - REMOVE_CONTAINERS={{.REMOVE_CONTAINERS}} RUNNER_TYPE={{.RUNNER_TYPE}} PATH=$PATH:{{.DIRCTL_BIN_PATH}} IMAGE_REPO={{.IMAGE_REPO}} DIRECTORY_IMAGE_TAG={{.DIRECTORY_IMAGE_TAG}} go test ./agntcy-dir/tests -v -failfast -test.v -test.paniconexit0 -ginkgo.timeout 10m -timeout 10m -ginkgo.v -ginkgo.focus "Samples build test"

  test:directory:push:
    desc: Directory agent push test
    cmds:
      - task: k8s:port-forward:setup:directory
      - defer: { task: k8s:port-forward:teardown:directory }
      - defer: { task: manifests:cleanup }
      - REMOVE_CONTAINERS={{.REMOVE_CONTAINERS}} RUNNER_TYPE={{.RUNNER_TYPE}} PATH=$PATH:{{.DIRCTL_BIN_PATH}} IMAGE_REPO={{.IMAGE_REPO}} DIRECTORY_IMAGE_TAG={{.DIRECTORY_IMAGE_TAG}} go test ./agntcy-dir/tests -v -failfast -test.v -test.paniconexit0 -ginkgo.timeout 30m -timeout 30m -ginkgo.v -ginkgo.focus "agent push and pull"

  test:directory:list:
    desc: Directory agent list test
    cmds:
      - task: k8s:port-forward:setup:directory
      - defer: { task: k8s:port-forward:teardown:directory }
      - defer: { task: manifests:cleanup }
      - REMOVE_CONTAINERS={{.REMOVE_CONTAINERS}} RUNNER_TYPE={{.RUNNER_TYPE}} PATH=$PATH:{{.DIRCTL_BIN_PATH}} IMAGE_REPO={{.IMAGE_REPO}} DIRECTORY_IMAGE_TAG={{.DIRECTORY_IMAGE_TAG}} go test ./agntcy-dir/tests -v -failfast -test.v -test.paniconexit0 -ginkgo.timeout 30m -timeout 30m -ginkgo.v -ginkgo.focus "Agntcy agent list tests"

  test:autogen-agent:run:
    internal: true
    cmds:
      - |
        hostNetFlag=""
        hostMachine=http://host.docker.internal:46357
        unameOut=$(uname -s)
        case ${unameOut} in
            Linux*)
              hostMachine=http://127.0.0.1:46357
              hostNetFlag="--net=host"
            ;;
            Darwin*)
              hostMachine=http://host.docker.internal:46357
            ;;
            *)
        esac
        echo "gw host: ${hostMachine}"

        docker run -d --rm \
        -e AZURE_OPENAI_API_KEY={{.AZURE_OPENAI_API_KEY}} \
        -e AZURE_OPENAI_ENDPOINT={{.AZURE_OPENAI_ENDPOINT}} \
        ${hostNetFlag} \
        --name autogen-agent \
        {{ .IMAGE_REPO }}/csit/test-autogen-agent:{{ .TEST_APP_TAG }} \
        poetry run python autogen_agent.py -g ${hostMachine}

  test:autogen-agent:remove:
    internal: true
    cmds:
      - docker stop $(docker ps -a --no-trunc --filter name=^/autogen-agent$ -q)

  test:gateway:
    desc: Gateway test
    cmds:
      - task: k8s:port-forward:setup:gateway
      - defer: { task: k8s:port-forward:teardown:gateway }
      - task: test:autogen-agent:run
      - defer: { task: test:autogen-agent:remove }
      - docker pull {{ .IMAGE_REPO }}/csit/test-langchain-agent:{{ .TEST_APP_TAG }}
      - REMOVE_CONTAINERS={{.REMOVE_CONTAINERS}} RUNNER_TYPE={{.RUNNER_TYPE}} IMAGE_REPO={{.IMAGE_REPO}} TEST_APP_TAG={{.TEST_APP_TAG}} go test ./agntcy-agp/tests -v -failfast -test.v -test.paniconexit0 -ginkgo.timeout 30m -timeout 30m -ginkgo.v

  version:
    desc: Get version
    cmds:
      - git describe --tags --match "v*" | cut -c 2-

  download:dirctl-bin:
    desc: Get dirctl binary from GitHub
    vars:
      ARCH:
        sh: |
          printf "%s" "{{.ARCH}}" | \
            sed -E 's/^(aarch64|aarch64_be|armv6l|armv7l|armv8b|armv8l)$$/arm64/g' | \
            sed -E 's/^x86_64$$/amd64/g'
      OS:
        sh: printf "%s" "{{.OS}}" | tr '[:upper:]' '[:lower:]'
    cmds:
      - |
        URL=https://github.com/agntcy/dir/releases/download/{{.DIRCTL_BIN_VERSION}}/dirctl-{{.OS}}-{{.ARCH}}
        echo $URL
        curl \
          --fail \
          --show-error \
          --location $URL \
          --output "{{.DIRCTL_BIN_PATH}}/dirctl" && \
        chmod +x "{{.DIRCTL_BIN_PATH}}/dirctl"

        # NOTE: The attribute may removed already, silent errors
        xattr -d com.apple.quarantine "{{.DIRCTL_BIN_PATH}}/dirctl" &> /dev/null || true
