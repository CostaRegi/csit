# Copyright AGNTCY Contributors (https://github.com/agntcy)
# SPDX-License-Identifier: Apache-2.0

---
version: '3'

silent: true

vars:

  WFSM_BIN_VERSION: '{{ .WFSM_BIN_VERSION | default "0.1.2" }}'
  AZURE_OPENAI_API_KEY: '{{ .AZURE_OPENAI_API_KEY | default "" }}'
  AZURE_OPENAI_ENDPOINT: '{{ .AZURE_OPENAI_ENDPOINT | default "" }}'
  AZURE_OPENAI_API_VERSION: '{{ .AZURE_OPENAI_API_VERSION | default "2025-02-01-preview" }}'
  SENDGRID_HOST: '{{ .SENDGRID_HOST | default "http://echo-server:80" }}'

  ARCH:
    sh: |
      if [ "$ARCH" == "" ]; then
        uname -m
      else
        printf $ARCH
      fi
  OS:
    sh: |
      if [ "$OS" == "" ]; then
        uname -s
      else
        printf $OS
      fi
  WFSM_BIN_PATH:
    sh: |
      if [ "$WFSM_BIN_PATH" == "" ]; then
        printf "{{.TASKFILE_DIR}}/tools"
      else
        printf $WFSM_BIN_PATH
      fi

tasks:
  default:
    cmd: task -l

  init-submodules:
    desc: Initialize submodules
    cmds:
      - git submodule update --init --recursive

  download:wfsm-bin:
    desc: Get wfsm binary from GitHub
    vars:
      ARCH:
        sh: |
          printf "%s" "{{.ARCH}}" | \
            sed -E 's/^(aarch64|aarch64_be|armv6l|armv7l|armv8b|armv8l)$/arm64/g' | \
            sed -E 's/^x86_64$/amd64/g'
      OS:
        sh: printf "%s" "{{.OS}}" | tr '[:upper:]' '[:lower:]'
    cmds:
      - |
          echo "Current ARCH is {{.ARCH}}"
          echo "Current OS is {{.OS}}"
          URL="https://github.com/agntcy/workflow-srv-mgr/releases/download/v{{.WFSM_BIN_VERSION}}/wfsm{{.WFSM_BIN_VERSION}}_{{.OS}}_{{.ARCH}}.tar.gz"
          echo "Downloading from $URL"
          echo "Working directory is {{.WFSM_BIN_PATH}}"
          if ! curl --fail --show-error --create-dirs --location $URL --output "{{.WFSM_BIN_PATH}}/wfsm.tar.gz"; then
            echo "ARCH or OS not supported"
            exit 1
          fi
          echo "Extracting wfsm binary in {{.WFSM_BIN_PATH}}"
          tar -xzf "{{.WFSM_BIN_PATH}}/wfsm.tar.gz" -C "{{.WFSM_BIN_PATH}}"
          rm "{{.WFSM_BIN_PATH}}/wfsm.tar.gz"
          chmod +x "{{.WFSM_BIN_PATH}}/wfsm"

  get-marketing-campaign-cfgs:
    desc: Populate marketing campaign config file
    deps: [init-submodules]
    cmds:
      - |
        echo "Read the example file and generate the configuration file..."
        awk -v api_key="{{.AZURE_OPENAI_API_KEY}}" \
            -v endpoint="{{.AZURE_OPENAI_ENDPOINT}}" \
            -v sendgrid_host="{{.SENDGRID_HOST}}" '
        BEGIN { output = "" }
        {
          if ($0 ~ /AZURE_OPENAI_API_KEY:/) {
            gsub("your-api-key", api_key)
          }
          if ($0 ~ /AZURE_OPENAI_ENDPOINT:/) {
            gsub("https://your-project-agents.openai.azure.com", endpoint)
          }
          if ($0 ~ /SENDGRID_HOST:/) {
            gsub("http://host.docker.internal:8080", sendgrid_host)
          }
          output = output $0 "\n"
        }
        END { print output > "./marketing-campaign/marketing_campaign_cfg_yaml.env" }
        ' ./agentic-apps/marketing-campaign/deploy/marketing_campaign_example.yaml

  run-marketing-campaign:
    desc: Run marketing campaign
    deps: [get-marketing-campaign-cfgs, download:wfsm-bin]
    cmds:
      - |
        if [ ! -f "./marketing-campaign/marketing_campaign_cfg_yaml.env" ]; then
          echo "Error: marketing_campaign_cfg_yaml.env file is missing. Please run 'task get-marketing-campaign-cfgs' to generate it."
          exit 1
        fi
      - echo "Installing dependencies with Poetry..."
      - poetry install --no-root
      - echo "Running wfsm cli"
      - |
        poetry run python ./tools/wfsm_runner.py \
          -w ../agentic-apps/marketing-campaign \
          -b ../../tools/wfsm \
          -l ../../tools/wfsm.log \
          -m ./deploy/marketing-campaign.json \
          -e ../../marketing-campaign/marketing_campaign_cfg_yaml.env \
          -f ./deploy/marketing_campaign_example.yaml
      - echo "Running the marketing campaign test, waiting workflow server to be ready..."
      - |
        poetry run python ./marketing-campaign/run_marketing_campaign.py \
          -w ../agentic-apps/marketing-campaign \
          -l ../../tools/wfsm.log
      - echo "test completed successfully"
